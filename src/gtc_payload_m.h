//
// Generated file, do not edit! Created by opp_msgtool 6.0 from gtc_payload.msg.
//

#ifndef __GTC_PAYLOAD_M_H
#define __GTC_PAYLOAD_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class gtc_payload;
/**
 * Class generated from <tt>gtc_payload.msg:17</tt> by opp_msgtool.
 * <pre>
 * packet gtc_payload extends cPacket
 * {
 *     bool Downlink = false;
 *     bool Uplink = false;
 * 
 *     //int PLI;						// 12 bits
 *     //int PortID;					// 12 bits
 *     //int PTI;						// 3 bits
 *     //int HEC;						// 3 bits
 *     // total HEM header size = 5 Bytes
 *     // DBRu size = 8 Byte
 * 
 *     int OnuID;
 *     int TContID;
 *     double BufferOccupancy;				// 24 bits
 * 
 * }
 * </pre>
 */
class gtc_payload : public ::omnetpp::cPacket
{
  protected:
    bool Downlink = false;
    bool Uplink = false;
    int OnuID = 0;
    int TContID = 0;
    double BufferOccupancy = 0;

  private:
    void copy(const gtc_payload& other);

  protected:
    bool operator==(const gtc_payload&) = delete;

  public:
    gtc_payload(const char *name=nullptr, short kind=0);
    gtc_payload(const gtc_payload& other);
    virtual ~gtc_payload();
    gtc_payload& operator=(const gtc_payload& other);
    virtual gtc_payload *dup() const override {return new gtc_payload(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getDownlink() const;
    virtual void setDownlink(bool Downlink);

    virtual bool getUplink() const;
    virtual void setUplink(bool Uplink);

    virtual int getOnuID() const;
    virtual void setOnuID(int OnuID);

    virtual int getTContID() const;
    virtual void setTContID(int TContID);

    virtual double getBufferOccupancy() const;
    virtual void setBufferOccupancy(double BufferOccupancy);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const gtc_payload& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, gtc_payload& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline gtc_payload *fromAnyPtr(any_ptr ptr) { return check_and_cast<gtc_payload*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __GTC_PAYLOAD_M_H

